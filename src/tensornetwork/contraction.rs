use crate::tensornetwork::TensorNetwork;
use tetra::{contract, Tensor as DataTensor};

/// Fully contracts a list of [DataTensor] objects based on a given contraction path using repeated SSA format.
///
/// # Arguments
///
/// * `tn` - [`TensorNetwork`] to be contracted
/// * `d_tn` - [`Vector`] of [DataTensor] objects containing data of [TensorNetwork]
/// * `contract_path` - [`Vector`] of [(usize, usize)], indicating contraction path. See [BranchBound] for details on `contract_path` format.
///
/// # Examples
///
/// ```
/// # extern crate tensorcontraction;
/// # use tensorcontraction::{
///     contractionpath::paths::{BranchBound, BranchBoundType, OptimizePath},
///     random::tensorgeneration::{random_sparse_tensor, random_tensor_network},
///     tensornetwork::{tensor::Tensor, TensorNetwork},
///     tensornetwork::contraction::tn_contract,
/// };
///
/// let r_tn = random_tensor_network(2, 3);
/// let mut d_tn = Vec::new();
/// for r_t in r_tn.get_tensors() {
///     d_tn.push(random_sparse_tensor(
///         r_t.clone(),
///         &r_tn.get_bond_dims(),
///         None,
///    ));
/// }
/// let mut opt = BranchBound::new(r_tn.clone(), None, 20, BranchBoundType::Flops);
/// opt.optimize_path(None);
/// let opt_path = opt.get_best_replace_path();
/// tn_contract(r_tn, d_tn, &opt_path);
/// ```
pub fn tn_contract(
    mut tn: TensorNetwork,
    mut d_tn: Vec<DataTensor>,
    contract_path: &Vec<(usize, usize)>,
) -> (TensorNetwork, Vec<DataTensor>) {
    let mut last_index = 0;
    for (i, j) in contract_path {
        let a_legs = tn[*i]
            .get_legs()
            .iter()
            .map(|e| *e as u32)
            .collect::<Vec<u32>>();
        let b_legs = tn[*j]
            .get_legs()
            .iter()
            .map(|e| *e as u32)
            .collect::<Vec<u32>>();
        let (_tensor_intersection, tensor_difference) = tn._contraction(*i, *j);
        // let bond_dims = tn.get_bond_dims();
        let out_legs = tensor_difference
            .iter()
            .map(|e| *e as u32)
            .collect::<Vec<u32>>();
        d_tn[*i] = contract(&out_legs, &a_legs, &d_tn[*i], &b_legs, &d_tn[*j]);
        d_tn[*j] = DataTensor::new(&[1]);
        last_index = *i;
    }
    d_tn.swap(0, last_index);
    d_tn.drain(1..d_tn.len());
    (tn, d_tn)
}

#[cfg(test)]
mod tests {
    use super::tn_contract;
    use crate::tensornetwork::{tensor::Tensor, TensorNetwork};
    use float_cmp::{approx_eq, assert_approx_eq};
    use itertools::Itertools;
    use num_complex::Complex64;
    use std::collections::HashMap;
    use tetra::{Layout, Tensor as DataTensor};

    fn setup() -> (
        Vec<Complex64>,
        Vec<Complex64>,
        Vec<Complex64>,
        Vec<Complex64>,
    ) {
        let d1 = [
            [
                [
                    -0.9217593445138872,
                    -0.7791328547817997,
                    0.3065621902907109,
                    1.0070513814242494,
                    -1.4581297058846472,
                    1.112958623970059,
                    -1.47965541641707,
                ],
                [
                    0.8532131503878133,
                    -0.4970195963981769,
                    -1.56969659091454,
                    1.0269891343508737,
                    0.3819701198256493,
                    -0.7952920026517015,
                    0.06983862440667,
                ],
            ],
            [
                [
                    -0.2629357635554609,
                    0.3195520662293442,
                    0.2687746483354086,
                    1.303782748198178,
                    0.4856914615688061,
                    1.0487365138920293,
                    0.0627871462134751,
                ],
                [
                    -0.7646677794871669,
                    -1.998851158798869,
                    1.2378847652193317,
                    0.9526962182160613,
                    -0.6794876219931549,
                    -0.3217762628859107,
                    0.4579847222819174,
                ],
            ],
            [
                [
                    0.1170190649463577,
                    -1.7930308213885777,
                    1.090589298195404,
                    -1.5404286015760296,
                    1.9544411932608103,
                    0.7870518883724142,
                    -0.7049600476517268,
                ],
                [
                    0.015396372644749,
                    -1.1558048465560895,
                    -0.7910028088804866,
                    0.0598639201195213,
                    -0.5142485672031464,
                    -0.5712685350114287,
                    -0.4951587493384196,
                ],
            ],
        ]
        .iter()
        .flatten()
        .flatten()
        .map(|&e| Complex64::new(e, 0.0))
        .collect::<Vec<Complex64>>();

        let d2 = [
            [
                [
                    1.380443439586123,
                    0.4284095859258739,
                    1.0968939086201241,
                    0.392304354342863,
                    -1.284159518471851,
                    -0.8704181177178197,
                ],
                [
                    0.2967150758361048,
                    0.7254027949521366,
                    -2.034085733209602,
                    1.2794354226709488,
                    -0.338051118455629,
                    2.498602636009547,
                ],
                [
                    -1.2137286818693622,
                    -0.5508141857562854,
                    -0.74138219195411,
                    -0.9853467154610969,
                    1.383863894963226,
                    -0.1293300875235636,
                ],
                [
                    -0.5386832379181141,
                    0.7179934291589998,
                    -1.5292887987005905,
                    -0.0773962578637889,
                    -1.3900207116428305,
                    -0.1187666385783147,
                ],
                [
                    0.7974567171671081,
                    0.5138762866341223,
                    -0.8122308848448025,
                    0.633275458927738,
                    1.5009099872834994,
                    1.184828800336471,
                ],
                [
                    0.5548064970951792,
                    -0.4204309736078314,
                    -0.1481563294298021,
                    0.4981673579460387,
                    -1.367962868635074,
                    -0.2444596675602804,
                ],
                [
                    -1.013482511430669,
                    0.9350667765663122,
                    1.1100413751776175,
                    -0.9516747774532163,
                    1.6966133261077505,
                    0.4996408804583046,
                ],
                [
                    -2.8463704740110742,
                    0.6956122591701775,
                    0.2733771071321773,
                    -1.0733718430576311,
                    1.8187184995749948,
                    1.3879443996254397,
                ],
            ],
            [
                [
                    0.7585634173097539,
                    1.4410467912075942,
                    0.7684078699444781,
                    0.1178874148393453,
                    0.7051318709396855,
                    1.8841850566032807,
                ],
                [
                    0.6938894995846625,
                    -2.1712541239863494,
                    -2.830186620624346,
                    1.7978200943072125,
                    0.1765694354924952,
                    0.8541951007175733,
                ],
                [
                    0.1819427909137973,
                    0.5004936505882422,
                    0.4342855364330946,
                    -0.5759857684742488,
                    -0.4155628235726723,
                    -0.3284502854927958,
                ],
                [
                    0.4653944818724984,
                    0.2111253693487004,
                    -0.9163762890875797,
                    0.3797395746194444,
                    -0.118932068323235,
                    -0.4131329711298201,
                ],
                [
                    -0.6245462871039384,
                    1.36091044234725,
                    0.1755961966538291,
                    -1.3012528730811905,
                    0.6379488409152866,
                    0.8162355319652165,
                ],
                [
                    -1.5471731944912606,
                    1.3966758662894165,
                    1.3240885828404625,
                    0.1251412167878216,
                    0.1533316504918912,
                    -1.0184470634344802,
                ],
                [
                    -0.5844784192794905,
                    -0.4684750936502775,
                    -0.3726434786003149,
                    0.6945662279765011,
                    0.6568501248860343,
                    0.8610582499474544,
                ],
                [
                    -0.2625983547192792,
                    0.7436887238449338,
                    -0.8906796288565497,
                    1.156592802671135,
                    -0.1580191929692969,
                    0.5034530197734575,
                ],
            ],
            [
                [
                    0.4679015426321749,
                    0.2651950250837642,
                    0.5201313364790686,
                    1.0661895082161519,
                    1.5536077905317194,
                    -0.6452683235299782,
                ],
                [
                    -0.2757710346906569,
                    0.2560355438471372,
                    -0.4741375000327802,
                    -0.7043717599611103,
                    1.1375252055073521,
                    -0.3242198068498539,
                ],
                [
                    0.2499639716415194,
                    -0.651420414557346,
                    -0.1892358894075076,
                    0.6417810537001639,
                    -1.614127799340019,
                    -1.3932312009284462,
                ],
                [
                    0.8730443223740929,
                    -0.0512840311264145,
                    -0.0921229131110095,
                    1.520760118938266,
                    -1.195726231035804,
                    1.2519255890657883,
                ],
                [
                    1.616582788936194,
                    0.0473998855965971,
                    1.1603748432689425,
                    1.1309117938221638,
                    -0.6204544743236862,
                    -0.5847209180083706,
                ],
                [
                    -1.329314276374479,
                    0.3000819032280702,
                    0.6741416347948523,
                    2.228250507052415,
                    -1.1181156032621782,
                    1.4898603806276223,
                ],
                [
                    0.2996447193649193,
                    -0.606773309201965,
                    -2.802531635383169,
                    -0.6634855462854515,
                    -1.4086891999769047,
                    1.0182324284173248,
                ],
                [
                    0.5508540355770816,
                    -0.4085552373149514,
                    -0.9042494454678928,
                    -1.5248528684490188,
                    1.148939889103476,
                    0.5999990576075913,
                ],
            ],
            [
                [
                    -0.1927284461749022,
                    -0.9458117265207427,
                    -0.0200028748761291,
                    -0.8816074441138251,
                    0.0347375342596279,
                    0.7168518672279285,
                ],
                [
                    1.8376230872681745,
                    -0.1688896034282688,
                    -0.6405941404224842,
                    -0.6519416371616529,
                    -0.9404746928256009,
                    0.3870471181399537,
                ],
                [
                    -1.3841476956827796,
                    0.2197711588695201,
                    -0.2439717333568485,
                    0.0774021728313105,
                    -0.9473046002058352,
                    -1.720380615657388,
                ],
                [
                    -0.8554772827100277,
                    1.2937043091366127,
                    1.0425288631486578,
                    0.1262027583492049,
                    0.764963806394352,
                    0.2647185635999509,
                ],
                [
                    -1.3896501459360173,
                    0.2433079507631671,
                    1.3253376629082636,
                    -1.9353699109071052,
                    0.3997772531531426,
                    0.1220450966525567,
                ],
                [
                    -0.0207823650700095,
                    -0.678727386977415,
                    -1.6537386775501703,
                    1.059534361630216,
                    -0.0505457997301752,
                    0.2107569367095379,
                ],
                [
                    -0.476712153253959,
                    1.2021999026361343,
                    0.0195748401349315,
                    0.8612893143121976,
                    0.0638489055103446,
                    -0.2735070535623126,
                ],
                [
                    0.4385601851329213,
                    1.2715124372546813,
                    0.3529448599930445,
                    1.3659510414579152,
                    -1.3357509499102609,
                    -1.1222397331983593,
                ],
            ],
            [
                [
                    -0.289557238341153,
                    -1.856576052398904,
                    0.3038701047112894,
                    0.8452085568734903,
                    -0.5027624148090893,
                    0.5075026860805697,
                ],
                [
                    -0.9655525164187441,
                    -0.0305871716020235,
                    0.5471979407753971,
                    -0.1087405727418147,
                    1.1097652812402177,
                    0.9725986929714576,
                ],
                [
                    0.034497535442321,
                    -1.8205601758746028,
                    0.2772303564743016,
                    0.1968010081709518,
                    -0.4139906779547887,
                    0.2856761451933381,
                ],
                [
                    -2.685037308122677,
                    0.5594357306874637,
                    0.3717958777112541,
                    1.641758721980513,
                    0.5446305658395441,
                    -0.434683458983986,
                ],
                [
                    0.6510364021865737,
                    -0.1405768827981091,
                    1.1519272180123543,
                    0.4322012487557907,
                    -0.7382844299883892,
                    0.1152863815510616,
                ],
                [
                    -0.45811351028182,
                    0.8633106792189895,
                    -0.1030737449683644,
                    -1.8984995589234237,
                    0.9664425955054884,
                    1.2991923000771695,
                ],
                [
                    -1.2287815996762033,
                    1.8995939085723033,
                    -0.1763191548950956,
                    -0.1707039771153181,
                    0.1737225310900519,
                    0.0820458234127819,
                ],
                [
                    -0.5888027869904894,
                    -0.6675408677356967,
                    -0.7942542783220068,
                    -0.3243658715547289,
                    -0.2272741037333375,
                    -1.6852065870125825,
                ],
            ],
            [
                [
                    1.125004383202595,
                    -0.594475304283697,
                    -0.6903732810465909,
                    -0.1653601153187743,
                    -1.5976396654685794,
                    -0.6083746792942832,
                ],
                [
                    0.3511143414338874,
                    -0.9916118392479678,
                    0.3395124181856298,
                    -1.8936956763331048,
                    0.3944124880656832,
                    2.1842222340526933,
                ],
                [
                    -0.6065368138521733,
                    1.0013975443223744,
                    2.8319943242345937,
                    0.7488655201387153,
                    -0.3808115665014846,
                    0.5404440637995866,
                ],
                [
                    0.1980880190009158,
                    -1.216252540078723,
                    -0.9302224712258574,
                    -0.039233949545581,
                    0.2139090007849053,
                    0.6293109515199925,
                ],
                [
                    0.0386257872819919,
                    -0.2623410390584296,
                    1.0050755763586816,
                    0.5820976889297378,
                    -0.6451903579355395,
                    -0.4079015319951822,
                ],
                [
                    -0.7128176893875984,
                    0.3167209837438821,
                    0.0325486447924146,
                    -0.6628773767858857,
                    1.217051175417348,
                    -1.5870566363785388,
                ],
                [
                    -0.4787412447416551,
                    -0.6494963002897964,
                    0.2982317872801012,
                    -0.876981571448455,
                    -0.7337062999314578,
                    0.1304689126946933,
                ],
                [
                    0.9656496804816829,
                    0.7402580689413446,
                    0.3354879522924077,
                    -0.9137280545401855,
                    -0.4529508224888618,
                    0.3771604590235708,
                ],
            ],
            [
                [
                    0.7506599619003667,
                    0.0723424772078187,
                    0.8449524648396608,
                    0.455173666208963,
                    0.8338060588086776,
                    -0.3302095323823732,
                ],
                [
                    0.159323244527785,
                    1.5023932198025496,
                    -1.2164824864472652,
                    -0.9919490636667505,
                    -1.4848118833058122,
                    1.6944528843590985,
                ],
                [
                    1.153641563209729,
                    1.291235990531723,
                    -0.0482094414586454,
                    0.2996062732424806,
                    0.4985832132688051,
                    0.6583578619862468,
                ],
                [
                    0.0508677215622169,
                    -0.6600177841617848,
                    0.8456980054097185,
                    -1.1867248273235316,
                    0.0238847864370381,
                    -0.5423700223167499,
                ],
                [
                    -0.3242453073743741,
                    0.2617209462392107,
                    0.6780218715073025,
                    2.503509423489134,
                    1.6907697246893807,
                    -0.7266856919592797,
                ],
                [
                    -0.9691551784241601,
                    0.1236326906793832,
                    -0.0514719082431673,
                    -0.2455976422168362,
                    -1.2140844308649865,
                    0.910816601687866,
                ],
                [
                    -0.4289441869477599,
                    -0.524344180631091,
                    -0.2817542448913027,
                    2.0120271274797847,
                    1.3324232594939316,
                    -0.6262128674422192,
                ],
                [
                    0.3399287865356863,
                    0.0100004080784695,
                    0.4139936319499063,
                    -0.3785515290501053,
                    -1.2802689801173948,
                    0.6921614928362156,
                ],
            ],
        ]
        .iter()
        .flatten()
        .flatten()
        .map(|&e| Complex64::new(e, 0.0))
        .collect::<Vec<Complex64>>();

        let d3 = [
            [
                [
                    1.0874213067341019,
                    0.2342689477245245,
                    1.9861279728684738,
                    0.5127013010194251,
                    -0.2315074916537346,
                    -0.3030283107395374,
                    0.81849737301315,
                    -1.2272040439535352,
                ],
                [
                    -0.1306570230569616,
                    0.9566705207574902,
                    -1.4311879734730213,
                    -2.294066008179133,
                    0.9325819490706537,
                    -0.8144213872696842,
                    0.3489985005245305,
                    -0.0461913932245748,
                ],
                [
                    -0.6724231718076915,
                    -0.6043981322159778,
                    1.5471979315976865,
                    -0.7618335376781934,
                    0.2786763122949636,
                    -0.2775530680645649,
                    -0.1006098116774502,
                    -0.1963093615000616,
                ],
                [
                    -1.2382091776322717,
                    -0.5159729493725398,
                    -1.5347695421611338,
                    1.579793331904859,
                    -1.1946737390720972,
                    0.2936071496820697,
                    1.6336006025021077,
                    -0.1272617475617668,
                ],
                [
                    -1.2660320956635933,
                    -1.12530533660762,
                    0.6634613554912412,
                    -0.8787854274186562,
                    -0.1124065508320824,
                    -0.6248373623481427,
                    0.2250409223203915,
                    0.8752752905659659,
                ],
            ],
            [
                [
                    0.8956450200671535,
                    -1.869447154734919,
                    -0.4139925880811673,
                    2.1701974672717883,
                    0.5547741010446164,
                    -0.5586189128356303,
                    0.4653051649171959,
                    -0.1229168172895909,
                ],
                [
                    0.8372099100255919,
                    0.4025888876674212,
                    0.1415851582270565,
                    -0.1729980741233575,
                    -1.270814608394036,
                    -0.2201070790480818,
                    -0.3472746314498911,
                    1.8913699127579218,
                ],
                [
                    -1.3326641525322904,
                    -0.2570619631103058,
                    1.1893027118913908,
                    0.1382592329624987,
                    0.2964494428991755,
                    1.3845730652457457,
                    -0.0353891425601026,
                    0.1136613863035748,
                ],
                [
                    1.183478389141419,
                    0.3018880292158482,
                    -1.274059779859837,
                    -0.1777988067065419,
                    0.4505198901437663,
                    -0.4369160137576625,
                    0.6314921433322449,
                    2.217094898385226,
                ],
                [
                    0.0805279867468246,
                    -0.6901491733257794,
                    -0.4294181323306717,
                    0.3097751929681073,
                    -0.3244699857403002,
                    0.2345881156634469,
                    0.4492726137016894,
                    -1.0098654238082747,
                ],
            ],
            [
                [
                    -0.0423533816954207,
                    -0.0118914619731031,
                    -0.1085938229744568,
                    0.4530415348428259,
                    1.271754746425368,
                    -0.1853109970336004,
                    0.4952312066100011,
                    -1.401918133175141,
                ],
                [
                    0.3455447295805747,
                    -0.4615209652500633,
                    0.030715607706598,
                    -0.941271762432652,
                    -0.6487997371755427,
                    -0.3927127432581355,
                    0.1697781866758286,
                    0.6314303429822306,
                ],
                [
                    0.8206732941429447,
                    0.4362293472251911,
                    0.443853831446379,
                    -1.445052473251218,
                    1.7981107070103926,
                    0.8722486519204369,
                    -0.234066021041918,
                    -0.4218547657749839,
                ],
                [
                    0.5526954307992059,
                    -2.789752585445542,
                    -0.3976753590235132,
                    1.5423211669649646,
                    -0.9129384503258011,
                    -0.2357772269577325,
                    0.3565952241798238,
                    0.5623768482534958,
                ],
                [
                    -1.0421475427315057,
                    -0.7599544478722665,
                    0.5390746739321788,
                    -0.8460488708012948,
                    0.4263298337621185,
                    0.3096153109024682,
                    1.5136575939999781,
                    -1.0099795476354938,
                ],
            ],
        ]
        .iter()
        .flatten()
        .flatten()
        .map(|&e| Complex64::new(e, 0.0))
        .collect::<Vec<Complex64>>();

        let dout = [
            21.12662191,
            22.54781684,
            19.14112552,
            21.50383642,
            20.41325586,
            21.21790454,
            19.02018308,
            19.80617065,
            18.14298459,
            19.23444656,
            22.09757373,
            23.84187648,
            20.99919352,
            21.00826462,
            17.48069436,
            20.77190844,
            18.61067063,
            20.64907039,
            17.89339839,
            19.46748844,
            18.55191736,
            18.47989775,
            21.51424258,
            23.15271771,
            21.58618595,
            21.87267004,
            19.59396099,
            22.66100042,
            19.69575675,
            21.82218509,
            19.89800678,
            21.31436564,
            19.46194771,
            19.86700794,
            22.58850997,
            24.51772651,
            22.31452844,
            23.62575299,
            20.01337021,
            22.48410562,
            21.13354029,
            22.92646174,
            20.28317164,
            20.82815715,
            19.11679716,
            21.63729977,
            23.81438329,
            25.89513636,
            25.95290253,
            27.8205038,
            23.56074292,
            27.02466869,
            24.12486376,
            26.50415702,
            24.02478861,
            25.81369869,
            22.49520341,
            24.56743911,
            26.9066631,
            30.23243803,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();

        (d1, d2, d3, dout)
    }

    #[test]
    fn test_tn_contraction() {
        // t1 is of shape [3, 2, 7]
        let t1 = Tensor::new(vec![0, 1, 2]);
        // t2 is of shape [7, 8, 6]
        let t2 = Tensor::new(vec![2, 3, 4]);
        // t3 is of shape [3, 5, 8]
        let t3 = Tensor::new(vec![0, 5, 3]);
        // tout is of shape [5, 6, 2]
        let tout = Tensor::new(vec![5, 4, 1]);

        let (d1, d2, d3, dout) = setup();

        let bond_dims = HashMap::from([(0, 3), (1, 2), (2, 7), (3, 8), (4, 6), (5, 5)]);

        let tc1 = DataTensor::new_from_flat(
            &(t1.iter().map(|e| bond_dims[e] as u32).collect::<Vec<u32>>()),
            d1,
            Some(tetra::Layout::RowMajor),
        );
        let tc2 = DataTensor::new_from_flat(
            &(t2.iter().map(|e| bond_dims[e] as u32).collect::<Vec<u32>>()),
            d2,
            Some(tetra::Layout::RowMajor),
        );
        let tc3 = DataTensor::new_from_flat(
            &(t3.iter().map(|e| bond_dims[e] as u32).collect::<Vec<u32>>()),
            d3,
            Some(tetra::Layout::RowMajor),
        );
        let tcout = DataTensor::new_from_flat(
            &(tout
                .iter()
                .map(|e| bond_dims[e] as u32)
                .collect::<Vec<u32>>()),
            dout,
            Some(tetra::Layout::RowMajor),
        );

        let tn = TensorNetwork::new(vec![t1, t2, t3], bond_dims, None);
        let contract_path = vec![(0, 1), (0, 2)];

        let (_tn, d_tn) = tn_contract(tn, vec![tc1, tc2, tc3], &contract_path);
        let range = tcout
            .shape()
            .iter()
            .map(|e| 0..*e)
            .multi_cartesian_product();
        for index in range {
            assert!(approx_eq!(
                f64,
                tcout.get(&index).re,
                d_tn[0].get(&index).re,
                epsilon = 1e-8
            ));
            assert!(approx_eq!(
                f64,
                tcout.get(&index).im,
                d_tn[0].get(&index).im,
                epsilon = 1e-8
            ));
        }
    }
}
